functor TigerLrValsFun(structure Token : TOKEN)
 : sig structure ParserData : PARSER_DATA
       structure Tokens : Tiger_TOKENS
   end
 = 
struct
structure ParserData=
struct
structure Header = 
struct

end
structure LrTable = Token.LrTable
structure Token = Token
local open LrTable in 
val table=let val actionRows =
"\
\\001\000\001\000\000\000\000\000\
\\001\000\001\000\137\000\016\000\030\000\017\000\029\000\018\000\028\000\
\\019\000\027\000\020\000\026\000\021\000\025\000\022\000\024\000\
\\023\000\023\000\024\000\022\000\025\000\021\000\026\000\020\000\
\\027\000\019\000\000\000\
\\001\000\001\000\152\000\006\000\152\000\008\000\152\000\010\000\152\000\
\\012\000\152\000\014\000\152\000\016\000\152\000\017\000\152\000\
\\018\000\152\000\019\000\152\000\020\000\152\000\021\000\152\000\
\\022\000\152\000\023\000\152\000\024\000\152\000\025\000\152\000\
\\026\000\152\000\027\000\152\000\031\000\152\000\032\000\152\000\
\\035\000\152\000\036\000\152\000\038\000\152\000\039\000\152\000\
\\043\000\152\000\044\000\152\000\045\000\152\000\000\000\
\\001\000\001\000\153\000\006\000\153\000\008\000\153\000\010\000\153\000\
\\012\000\153\000\014\000\153\000\016\000\153\000\017\000\153\000\
\\018\000\153\000\019\000\153\000\020\000\153\000\021\000\153\000\
\\022\000\153\000\023\000\153\000\024\000\153\000\025\000\153\000\
\\026\000\153\000\027\000\153\000\031\000\153\000\032\000\153\000\
\\035\000\153\000\036\000\153\000\038\000\153\000\039\000\153\000\
\\043\000\153\000\044\000\153\000\045\000\153\000\000\000\
\\001\000\001\000\154\000\006\000\154\000\008\000\154\000\010\000\154\000\
\\012\000\154\000\014\000\154\000\016\000\154\000\017\000\154\000\
\\018\000\154\000\019\000\154\000\020\000\154\000\021\000\154\000\
\\022\000\154\000\023\000\154\000\024\000\154\000\025\000\154\000\
\\026\000\154\000\027\000\154\000\031\000\154\000\032\000\154\000\
\\035\000\154\000\036\000\154\000\038\000\154\000\039\000\154\000\
\\043\000\154\000\044\000\154\000\045\000\154\000\000\000\
\\001\000\001\000\155\000\006\000\155\000\008\000\155\000\010\000\155\000\
\\012\000\155\000\014\000\155\000\016\000\155\000\017\000\155\000\
\\018\000\155\000\019\000\155\000\020\000\155\000\021\000\155\000\
\\022\000\155\000\023\000\155\000\024\000\155\000\025\000\155\000\
\\026\000\155\000\027\000\155\000\031\000\155\000\032\000\155\000\
\\035\000\155\000\036\000\155\000\038\000\155\000\039\000\155\000\
\\043\000\155\000\044\000\155\000\045\000\155\000\000\000\
\\001\000\001\000\156\000\006\000\156\000\008\000\156\000\010\000\156\000\
\\012\000\156\000\014\000\156\000\016\000\156\000\017\000\156\000\
\\018\000\156\000\019\000\156\000\020\000\156\000\021\000\156\000\
\\022\000\156\000\023\000\156\000\024\000\156\000\025\000\156\000\
\\026\000\156\000\027\000\156\000\031\000\156\000\032\000\156\000\
\\035\000\156\000\036\000\156\000\038\000\156\000\039\000\156\000\
\\043\000\156\000\044\000\156\000\045\000\156\000\000\000\
\\001\000\001\000\157\000\006\000\157\000\008\000\157\000\010\000\157\000\
\\012\000\157\000\014\000\157\000\016\000\030\000\017\000\029\000\
\\018\000\028\000\019\000\027\000\020\000\026\000\021\000\025\000\
\\022\000\024\000\023\000\023\000\024\000\022\000\025\000\021\000\
\\026\000\020\000\027\000\019\000\031\000\157\000\032\000\157\000\
\\035\000\157\000\036\000\157\000\038\000\157\000\039\000\157\000\
\\043\000\157\000\044\000\157\000\045\000\157\000\000\000\
\\001\000\001\000\158\000\006\000\158\000\008\000\158\000\010\000\158\000\
\\011\000\018\000\012\000\158\000\014\000\158\000\015\000\017\000\
\\016\000\158\000\017\000\158\000\018\000\158\000\019\000\158\000\
\\020\000\158\000\021\000\158\000\022\000\158\000\023\000\158\000\
\\024\000\158\000\025\000\158\000\026\000\158\000\027\000\158\000\
\\028\000\016\000\031\000\158\000\032\000\158\000\035\000\158\000\
\\036\000\158\000\038\000\158\000\039\000\158\000\043\000\158\000\
\\044\000\158\000\045\000\158\000\000\000\
\\001\000\001\000\159\000\006\000\159\000\008\000\159\000\010\000\159\000\
\\012\000\159\000\014\000\159\000\016\000\030\000\017\000\029\000\
\\018\000\028\000\019\000\027\000\020\000\026\000\021\000\025\000\
\\022\000\024\000\023\000\023\000\024\000\022\000\025\000\021\000\
\\026\000\020\000\027\000\019\000\031\000\159\000\032\000\159\000\
\\035\000\159\000\036\000\159\000\038\000\159\000\039\000\159\000\
\\043\000\159\000\044\000\159\000\045\000\159\000\000\000\
\\001\000\001\000\160\000\006\000\160\000\008\000\160\000\010\000\160\000\
\\012\000\160\000\014\000\160\000\016\000\030\000\017\000\029\000\
\\018\000\028\000\019\000\027\000\020\000\026\000\021\000\025\000\
\\022\000\024\000\023\000\023\000\024\000\022\000\025\000\021\000\
\\026\000\020\000\027\000\019\000\031\000\160\000\032\000\092\000\
\\035\000\160\000\036\000\160\000\038\000\160\000\039\000\160\000\
\\043\000\160\000\044\000\160\000\045\000\160\000\000\000\
\\001\000\001\000\161\000\006\000\161\000\008\000\161\000\010\000\161\000\
\\012\000\161\000\014\000\161\000\016\000\030\000\017\000\029\000\
\\018\000\028\000\019\000\027\000\020\000\026\000\021\000\025\000\
\\022\000\024\000\023\000\023\000\024\000\022\000\025\000\021\000\
\\026\000\020\000\027\000\019\000\031\000\161\000\032\000\161\000\
\\035\000\161\000\036\000\161\000\038\000\161\000\039\000\161\000\
\\043\000\161\000\044\000\161\000\045\000\161\000\000\000\
\\001\000\001\000\162\000\006\000\162\000\008\000\162\000\010\000\162\000\
\\012\000\162\000\014\000\162\000\016\000\030\000\017\000\029\000\
\\018\000\028\000\019\000\027\000\020\000\026\000\021\000\025\000\
\\022\000\024\000\023\000\023\000\024\000\022\000\025\000\021\000\
\\026\000\020\000\027\000\019\000\031\000\162\000\032\000\162\000\
\\035\000\162\000\036\000\162\000\038\000\162\000\039\000\162\000\
\\043\000\162\000\044\000\162\000\045\000\162\000\000\000\
\\001\000\001\000\163\000\006\000\163\000\008\000\163\000\010\000\163\000\
\\012\000\163\000\014\000\163\000\016\000\163\000\017\000\163\000\
\\018\000\163\000\019\000\163\000\020\000\163\000\021\000\163\000\
\\022\000\163\000\023\000\163\000\024\000\163\000\025\000\163\000\
\\026\000\163\000\027\000\163\000\031\000\163\000\032\000\163\000\
\\035\000\163\000\036\000\163\000\038\000\163\000\039\000\163\000\
\\043\000\163\000\044\000\163\000\045\000\163\000\000\000\
\\001\000\001\000\164\000\006\000\164\000\008\000\164\000\010\000\164\000\
\\012\000\164\000\014\000\164\000\016\000\164\000\017\000\164\000\
\\018\000\164\000\019\000\164\000\020\000\164\000\021\000\164\000\
\\022\000\164\000\023\000\164\000\024\000\164\000\025\000\164\000\
\\026\000\164\000\027\000\164\000\031\000\164\000\032\000\164\000\
\\035\000\164\000\036\000\164\000\038\000\164\000\039\000\164\000\
\\043\000\164\000\044\000\164\000\045\000\164\000\000\000\
\\001\000\001\000\165\000\006\000\165\000\008\000\165\000\010\000\165\000\
\\012\000\165\000\014\000\165\000\016\000\030\000\017\000\029\000\
\\018\000\028\000\019\000\027\000\020\000\026\000\021\000\025\000\
\\022\000\024\000\023\000\023\000\024\000\022\000\025\000\021\000\
\\026\000\165\000\027\000\165\000\031\000\165\000\032\000\165\000\
\\035\000\165\000\036\000\165\000\038\000\165\000\039\000\165\000\
\\043\000\165\000\044\000\165\000\045\000\165\000\000\000\
\\001\000\001\000\166\000\006\000\166\000\008\000\166\000\010\000\166\000\
\\012\000\166\000\014\000\166\000\016\000\030\000\017\000\029\000\
\\018\000\028\000\019\000\027\000\020\000\026\000\021\000\025\000\
\\022\000\024\000\023\000\023\000\024\000\022\000\025\000\021\000\
\\026\000\020\000\027\000\166\000\031\000\166\000\032\000\166\000\
\\035\000\166\000\036\000\166\000\038\000\166\000\039\000\166\000\
\\043\000\166\000\044\000\166\000\045\000\166\000\000\000\
\\001\000\001\000\167\000\006\000\167\000\008\000\167\000\010\000\167\000\
\\012\000\167\000\014\000\167\000\016\000\030\000\017\000\029\000\
\\018\000\028\000\019\000\027\000\026\000\167\000\027\000\167\000\
\\031\000\167\000\032\000\167\000\035\000\167\000\036\000\167\000\
\\038\000\167\000\039\000\167\000\043\000\167\000\044\000\167\000\
\\045\000\167\000\000\000\
\\001\000\001\000\168\000\006\000\168\000\008\000\168\000\010\000\168\000\
\\012\000\168\000\014\000\168\000\016\000\030\000\017\000\029\000\
\\018\000\028\000\019\000\027\000\026\000\168\000\027\000\168\000\
\\031\000\168\000\032\000\168\000\035\000\168\000\036\000\168\000\
\\038\000\168\000\039\000\168\000\043\000\168\000\044\000\168\000\
\\045\000\168\000\000\000\
\\001\000\001\000\169\000\006\000\169\000\008\000\169\000\010\000\169\000\
\\012\000\169\000\014\000\169\000\016\000\169\000\017\000\169\000\
\\018\000\028\000\019\000\027\000\020\000\169\000\021\000\169\000\
\\022\000\169\000\023\000\169\000\024\000\169\000\025\000\169\000\
\\026\000\169\000\027\000\169\000\031\000\169\000\032\000\169\000\
\\035\000\169\000\036\000\169\000\038\000\169\000\039\000\169\000\
\\043\000\169\000\044\000\169\000\045\000\169\000\000\000\
\\001\000\001\000\170\000\006\000\170\000\008\000\170\000\010\000\170\000\
\\012\000\170\000\014\000\170\000\016\000\170\000\017\000\170\000\
\\018\000\028\000\019\000\027\000\020\000\170\000\021\000\170\000\
\\022\000\170\000\023\000\170\000\024\000\170\000\025\000\170\000\
\\026\000\170\000\027\000\170\000\031\000\170\000\032\000\170\000\
\\035\000\170\000\036\000\170\000\038\000\170\000\039\000\170\000\
\\043\000\170\000\044\000\170\000\045\000\170\000\000\000\
\\001\000\001\000\171\000\006\000\171\000\008\000\171\000\010\000\171\000\
\\012\000\171\000\014\000\171\000\016\000\171\000\017\000\171\000\
\\018\000\171\000\019\000\171\000\020\000\171\000\021\000\171\000\
\\022\000\171\000\023\000\171\000\024\000\171\000\025\000\171\000\
\\026\000\171\000\027\000\171\000\031\000\171\000\032\000\171\000\
\\035\000\171\000\036\000\171\000\038\000\171\000\039\000\171\000\
\\043\000\171\000\044\000\171\000\045\000\171\000\000\000\
\\001\000\001\000\172\000\006\000\172\000\008\000\172\000\010\000\172\000\
\\012\000\172\000\014\000\172\000\016\000\172\000\017\000\172\000\
\\018\000\172\000\019\000\172\000\020\000\172\000\021\000\172\000\
\\022\000\172\000\023\000\172\000\024\000\172\000\025\000\172\000\
\\026\000\172\000\027\000\172\000\031\000\172\000\032\000\172\000\
\\035\000\172\000\036\000\172\000\038\000\172\000\039\000\172\000\
\\043\000\172\000\044\000\172\000\045\000\172\000\000\000\
\\001\000\001\000\173\000\006\000\173\000\008\000\173\000\010\000\173\000\
\\012\000\173\000\014\000\173\000\016\000\030\000\017\000\029\000\
\\018\000\028\000\019\000\027\000\026\000\173\000\027\000\173\000\
\\031\000\173\000\032\000\173\000\035\000\173\000\036\000\173\000\
\\038\000\173\000\039\000\173\000\043\000\173\000\044\000\173\000\
\\045\000\173\000\000\000\
\\001\000\001\000\174\000\006\000\174\000\008\000\174\000\010\000\174\000\
\\012\000\174\000\014\000\174\000\016\000\030\000\017\000\029\000\
\\018\000\028\000\019\000\027\000\026\000\174\000\027\000\174\000\
\\031\000\174\000\032\000\174\000\035\000\174\000\036\000\174\000\
\\038\000\174\000\039\000\174\000\043\000\174\000\044\000\174\000\
\\045\000\174\000\000\000\
\\001\000\001\000\175\000\006\000\175\000\008\000\175\000\010\000\175\000\
\\012\000\175\000\014\000\175\000\016\000\030\000\017\000\029\000\
\\018\000\028\000\019\000\027\000\026\000\175\000\027\000\175\000\
\\031\000\175\000\032\000\175\000\035\000\175\000\036\000\175\000\
\\038\000\175\000\039\000\175\000\043\000\175\000\044\000\175\000\
\\045\000\175\000\000\000\
\\001\000\001\000\176\000\006\000\176\000\008\000\176\000\010\000\176\000\
\\012\000\176\000\014\000\176\000\016\000\030\000\017\000\029\000\
\\018\000\028\000\019\000\027\000\026\000\176\000\027\000\176\000\
\\031\000\176\000\032\000\176\000\035\000\176\000\036\000\176\000\
\\038\000\176\000\039\000\176\000\043\000\176\000\044\000\176\000\
\\045\000\176\000\000\000\
\\001\000\001\000\177\000\006\000\177\000\008\000\177\000\010\000\177\000\
\\012\000\177\000\014\000\177\000\016\000\177\000\017\000\177\000\
\\018\000\177\000\019\000\177\000\020\000\177\000\021\000\177\000\
\\022\000\177\000\023\000\177\000\024\000\177\000\025\000\177\000\
\\026\000\177\000\027\000\177\000\031\000\177\000\032\000\177\000\
\\035\000\177\000\036\000\177\000\038\000\177\000\039\000\177\000\
\\043\000\177\000\044\000\177\000\045\000\177\000\000\000\
\\001\000\001\000\178\000\006\000\178\000\008\000\178\000\010\000\178\000\
\\012\000\178\000\014\000\178\000\016\000\178\000\017\000\178\000\
\\018\000\178\000\019\000\178\000\020\000\178\000\021\000\178\000\
\\022\000\178\000\023\000\178\000\024\000\178\000\025\000\178\000\
\\026\000\178\000\027\000\178\000\031\000\178\000\032\000\178\000\
\\035\000\178\000\036\000\178\000\038\000\178\000\039\000\178\000\
\\043\000\178\000\044\000\178\000\045\000\178\000\000\000\
\\001\000\001\000\192\000\006\000\192\000\008\000\192\000\010\000\192\000\
\\011\000\192\000\012\000\192\000\014\000\192\000\015\000\192\000\
\\016\000\192\000\017\000\192\000\018\000\192\000\019\000\192\000\
\\020\000\192\000\021\000\192\000\022\000\192\000\023\000\192\000\
\\024\000\192\000\025\000\192\000\026\000\192\000\027\000\192\000\
\\028\000\192\000\031\000\192\000\032\000\192\000\035\000\192\000\
\\036\000\192\000\038\000\192\000\039\000\192\000\043\000\192\000\
\\044\000\192\000\045\000\192\000\000\000\
\\001\000\001\000\193\000\006\000\193\000\008\000\193\000\009\000\039\000\
\\010\000\193\000\011\000\193\000\012\000\193\000\013\000\038\000\
\\014\000\193\000\015\000\193\000\016\000\193\000\017\000\193\000\
\\018\000\193\000\019\000\193\000\020\000\193\000\021\000\193\000\
\\022\000\193\000\023\000\193\000\024\000\193\000\025\000\193\000\
\\026\000\193\000\027\000\193\000\028\000\193\000\031\000\193\000\
\\032\000\193\000\035\000\193\000\036\000\193\000\038\000\193\000\
\\039\000\193\000\043\000\193\000\044\000\193\000\045\000\193\000\000\000\
\\001\000\001\000\194\000\006\000\194\000\008\000\194\000\010\000\194\000\
\\011\000\194\000\012\000\194\000\014\000\194\000\015\000\194\000\
\\016\000\194\000\017\000\194\000\018\000\194\000\019\000\194\000\
\\020\000\194\000\021\000\194\000\022\000\194\000\023\000\194\000\
\\024\000\194\000\025\000\194\000\026\000\194\000\027\000\194\000\
\\028\000\194\000\031\000\194\000\032\000\194\000\035\000\194\000\
\\036\000\194\000\038\000\194\000\039\000\194\000\043\000\194\000\
\\044\000\194\000\045\000\194\000\000\000\
\\001\000\002\000\015\000\003\000\096\000\004\000\014\000\005\000\013\000\
\\009\000\012\000\017\000\011\000\030\000\010\000\033\000\009\000\
\\034\000\008\000\037\000\007\000\041\000\006\000\042\000\005\000\000\000\
\\001\000\002\000\015\000\004\000\014\000\005\000\013\000\006\000\181\000\
\\009\000\012\000\010\000\181\000\017\000\011\000\030\000\010\000\
\\033\000\009\000\034\000\008\000\037\000\007\000\041\000\006\000\
\\042\000\005\000\000\000\
\\001\000\002\000\015\000\004\000\014\000\005\000\013\000\008\000\140\000\
\\009\000\012\000\010\000\140\000\017\000\011\000\030\000\010\000\
\\033\000\009\000\034\000\008\000\037\000\007\000\041\000\006\000\
\\042\000\005\000\000\000\
\\001\000\002\000\015\000\004\000\014\000\005\000\013\000\008\000\140\000\
\\009\000\012\000\017\000\011\000\030\000\010\000\033\000\009\000\
\\034\000\008\000\037\000\007\000\039\000\140\000\041\000\006\000\
\\042\000\005\000\000\000\
\\001\000\002\000\015\000\004\000\014\000\005\000\013\000\009\000\012\000\
\\017\000\011\000\030\000\010\000\033\000\009\000\034\000\008\000\
\\037\000\007\000\041\000\006\000\042\000\005\000\000\000\
\\001\000\002\000\032\000\000\000\
\\001\000\002\000\041\000\000\000\
\\001\000\002\000\069\000\006\000\187\000\014\000\187\000\000\000\
\\001\000\002\000\074\000\000\000\
\\001\000\002\000\075\000\000\000\
\\001\000\002\000\093\000\000\000\
\\001\000\002\000\105\000\006\000\184\000\010\000\184\000\000\000\
\\001\000\002\000\105\000\006\000\184\000\014\000\184\000\000\000\
\\001\000\002\000\124\000\000\000\
\\001\000\003\000\073\000\000\000\
\\001\000\003\000\101\000\013\000\100\000\029\000\099\000\000\000\
\\001\000\003\000\103\000\000\000\
\\001\000\003\000\119\000\000\000\
\\001\000\003\000\125\000\000\000\
\\001\000\003\000\129\000\000\000\
\\001\000\003\000\133\000\000\000\
\\001\000\006\000\150\000\014\000\150\000\038\000\150\000\043\000\150\000\
\\044\000\150\000\045\000\150\000\000\000\
\\001\000\006\000\151\000\014\000\151\000\016\000\030\000\017\000\029\000\
\\018\000\028\000\019\000\027\000\020\000\026\000\021\000\025\000\
\\022\000\024\000\023\000\023\000\024\000\022\000\025\000\021\000\
\\026\000\020\000\027\000\019\000\038\000\151\000\043\000\151\000\
\\044\000\151\000\045\000\151\000\000\000\
\\001\000\006\000\179\000\010\000\179\000\016\000\030\000\017\000\029\000\
\\018\000\028\000\019\000\027\000\020\000\026\000\021\000\025\000\
\\022\000\024\000\023\000\023\000\024\000\022\000\025\000\021\000\
\\026\000\020\000\027\000\019\000\000\000\
\\001\000\006\000\180\000\010\000\180\000\016\000\030\000\017\000\029\000\
\\018\000\028\000\019\000\027\000\020\000\026\000\021\000\025\000\
\\022\000\024\000\023\000\023\000\024\000\022\000\025\000\021\000\
\\026\000\020\000\027\000\019\000\000\000\
\\001\000\006\000\182\000\010\000\182\000\014\000\182\000\000\000\
\\001\000\006\000\183\000\010\000\183\000\014\000\183\000\000\000\
\\001\000\006\000\185\000\014\000\185\000\000\000\
\\001\000\006\000\186\000\014\000\186\000\000\000\
\\001\000\006\000\082\000\014\000\081\000\000\000\
\\001\000\006\000\085\000\010\000\084\000\000\000\
\\001\000\006\000\114\000\010\000\113\000\000\000\
\\001\000\006\000\114\000\014\000\120\000\000\000\
\\001\000\007\000\088\000\028\000\087\000\000\000\
\\001\000\007\000\115\000\000\000\
\\001\000\007\000\123\000\020\000\122\000\000\000\
\\001\000\007\000\130\000\000\000\
\\001\000\008\000\138\000\010\000\138\000\016\000\030\000\017\000\029\000\
\\018\000\028\000\019\000\027\000\020\000\026\000\021\000\025\000\
\\022\000\024\000\023\000\023\000\024\000\022\000\025\000\021\000\
\\026\000\020\000\027\000\019\000\039\000\138\000\000\000\
\\001\000\008\000\139\000\010\000\139\000\016\000\030\000\017\000\029\000\
\\018\000\028\000\019\000\027\000\020\000\026\000\021\000\025\000\
\\022\000\024\000\023\000\023\000\024\000\022\000\025\000\021\000\
\\026\000\020\000\027\000\019\000\039\000\139\000\000\000\
\\001\000\008\000\067\000\010\000\066\000\000\000\
\\001\000\008\000\067\000\039\000\090\000\000\000\
\\001\000\009\000\089\000\000\000\
\\001\000\011\000\109\000\000\000\
\\001\000\012\000\072\000\016\000\030\000\017\000\029\000\018\000\028\000\
\\019\000\027\000\020\000\026\000\021\000\025\000\022\000\024\000\
\\023\000\023\000\024\000\022\000\025\000\021\000\026\000\020\000\
\\027\000\019\000\000\000\
\\001\000\012\000\127\000\016\000\030\000\017\000\029\000\018\000\028\000\
\\019\000\027\000\020\000\026\000\021\000\025\000\022\000\024\000\
\\023\000\023\000\024\000\022\000\025\000\021\000\026\000\020\000\
\\027\000\019\000\000\000\
\\001\000\016\000\030\000\017\000\029\000\018\000\028\000\019\000\027\000\
\\020\000\026\000\021\000\025\000\022\000\024\000\023\000\023\000\
\\024\000\022\000\025\000\021\000\026\000\020\000\027\000\019\000\
\\031\000\065\000\000\000\
\\001\000\016\000\030\000\017\000\029\000\018\000\028\000\019\000\027\000\
\\020\000\026\000\021\000\025\000\022\000\024\000\023\000\023\000\
\\024\000\022\000\025\000\021\000\026\000\020\000\027\000\019\000\
\\035\000\091\000\000\000\
\\001\000\016\000\030\000\017\000\029\000\018\000\028\000\019\000\027\000\
\\020\000\026\000\021\000\025\000\022\000\024\000\023\000\023\000\
\\024\000\022\000\025\000\021\000\026\000\020\000\027\000\019\000\
\\036\000\064\000\000\000\
\\001\000\016\000\030\000\017\000\029\000\018\000\028\000\019\000\027\000\
\\020\000\026\000\021\000\025\000\022\000\024\000\023\000\023\000\
\\024\000\022\000\025\000\021\000\026\000\020\000\027\000\019\000\
\\036\000\116\000\000\000\
\\001\000\016\000\030\000\017\000\029\000\018\000\028\000\019\000\027\000\
\\020\000\026\000\021\000\025\000\022\000\024\000\023\000\023\000\
\\024\000\022\000\025\000\021\000\026\000\020\000\027\000\019\000\
\\038\000\190\000\043\000\190\000\044\000\190\000\045\000\190\000\000\000\
\\001\000\016\000\030\000\017\000\029\000\018\000\028\000\019\000\027\000\
\\020\000\026\000\021\000\025\000\022\000\024\000\023\000\023\000\
\\024\000\022\000\025\000\021\000\026\000\020\000\027\000\019\000\
\\038\000\191\000\043\000\191\000\044\000\191\000\045\000\191\000\000\000\
\\001\000\020\000\083\000\000\000\
\\001\000\020\000\086\000\000\000\
\\001\000\020\000\108\000\000\000\
\\001\000\020\000\132\000\000\000\
\\001\000\028\000\063\000\000\000\
\\001\000\028\000\112\000\000\000\
\\001\000\038\000\141\000\043\000\141\000\044\000\141\000\045\000\141\000\000\000\
\\001\000\038\000\142\000\043\000\142\000\044\000\142\000\045\000\142\000\000\000\
\\001\000\038\000\143\000\043\000\143\000\044\000\143\000\045\000\143\000\000\000\
\\001\000\038\000\144\000\043\000\144\000\044\000\144\000\045\000\144\000\000\000\
\\001\000\038\000\145\000\043\000\145\000\044\000\145\000\045\000\145\000\000\000\
\\001\000\038\000\146\000\043\000\146\000\044\000\146\000\045\000\146\000\000\000\
\\001\000\038\000\147\000\043\000\147\000\044\000\147\000\045\000\147\000\000\000\
\\001\000\038\000\148\000\043\000\148\000\044\000\148\000\045\000\148\000\000\000\
\\001\000\038\000\149\000\043\000\149\000\044\000\149\000\045\000\149\000\000\000\
\\001\000\038\000\188\000\043\000\188\000\044\000\188\000\045\000\188\000\000\000\
\\001\000\038\000\189\000\043\000\189\000\044\000\189\000\045\000\189\000\000\000\
\\001\000\038\000\062\000\043\000\061\000\044\000\060\000\045\000\059\000\000\000\
\\001\000\040\000\110\000\000\000\
\\001\000\040\000\131\000\000\000\
\"
val actionRowNumbers =
"\036\000\008\000\001\000\005\000\
\\006\000\090\000\037\000\036\000\
\\036\000\036\000\034\000\004\000\
\\003\000\030\000\036\000\038\000\
\\036\000\036\000\036\000\036\000\
\\036\000\036\000\036\000\036\000\
\\036\000\036\000\036\000\036\000\
\\036\000\100\000\087\000\079\000\
\\077\000\028\000\071\000\070\000\
\\039\000\033\000\007\000\029\000\
\\075\000\016\000\015\000\023\000\
\\024\000\025\000\026\000\018\000\
\\017\000\022\000\021\000\020\000\
\\019\000\093\000\092\000\091\000\
\\089\000\046\000\040\000\041\000\
\\035\000\036\000\036\000\036\000\
\\027\000\036\000\061\000\083\000\
\\062\000\056\000\031\000\084\000\
\\065\000\073\000\072\000\078\000\
\\011\000\010\000\069\000\014\000\
\\042\000\032\000\013\000\036\000\
\\047\000\032\000\048\000\043\000\
\\002\000\036\000\036\000\085\000\
\\060\000\054\000\074\000\055\000\
\\094\000\101\000\044\000\095\000\
\\099\000\088\000\063\000\066\000\
\\080\000\009\000\032\000\036\000\
\\049\000\064\000\032\000\067\000\
\\045\000\050\000\036\000\059\000\
\\076\000\096\000\097\000\098\000\
\\036\000\051\000\068\000\058\000\
\\012\000\102\000\081\000\086\000\
\\052\000\032\000\036\000\057\000\
\\053\000\082\000\000\000"
val gotoT =
"\
\\001\000\002\000\002\000\134\000\010\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\003\000\029\000\000\000\
\\000\000\
\\001\000\031\000\010\000\001\000\000\000\
\\001\000\032\000\010\000\001\000\000\000\
\\001\000\033\000\010\000\001\000\000\000\
\\001\000\035\000\010\000\001\000\011\000\034\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\038\000\010\000\001\000\000\000\
\\000\000\
\\001\000\040\000\010\000\001\000\000\000\
\\001\000\041\000\010\000\001\000\000\000\
\\001\000\042\000\010\000\001\000\000\000\
\\001\000\043\000\010\000\001\000\000\000\
\\001\000\044\000\010\000\001\000\000\000\
\\001\000\045\000\010\000\001\000\000\000\
\\001\000\046\000\010\000\001\000\000\000\
\\001\000\047\000\010\000\001\000\000\000\
\\001\000\048\000\010\000\001\000\000\000\
\\001\000\049\000\010\000\001\000\000\000\
\\001\000\050\000\010\000\001\000\000\000\
\\001\000\051\000\010\000\001\000\000\000\
\\001\000\052\000\010\000\001\000\000\000\
\\004\000\056\000\005\000\055\000\006\000\054\000\007\000\053\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\013\000\066\000\000\000\
\\001\000\069\000\010\000\001\000\014\000\068\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\035\000\010\000\001\000\011\000\074\000\000\000\
\\001\000\075\000\010\000\001\000\000\000\
\\001\000\076\000\010\000\001\000\000\000\
\\001\000\077\000\010\000\001\000\000\000\
\\000\000\
\\001\000\078\000\010\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\093\000\010\000\001\000\012\000\092\000\000\000\
\\000\000\
\\001\000\095\000\010\000\001\000\000\000\
\\008\000\096\000\000\000\
\\001\000\093\000\010\000\001\000\012\000\100\000\000\000\
\\000\000\
\\009\000\102\000\000\000\
\\000\000\
\\001\000\104\000\010\000\001\000\000\000\
\\001\000\105\000\010\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\009\000\109\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\093\000\010\000\001\000\012\000\115\000\000\000\
\\001\000\116\000\010\000\001\000\000\000\
\\000\000\
\\000\000\
\\001\000\093\000\010\000\001\000\012\000\119\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\124\000\010\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\126\000\010\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\093\000\010\000\001\000\012\000\132\000\000\000\
\\001\000\133\000\010\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\"
val numstates = 135
val numrules = 58
val s = ref "" and index = ref 0
val string_to_int = fn () => 
let val i = !index
in index := i+2; Char.ord(String.sub(!s,i)) + Char.ord(String.sub(!s,i+1)) * 256
end
val string_to_list = fn s' =>
    let val len = String.size s'
        fun f () =
           if !index < len then string_to_int() :: f()
           else nil
   in index := 0; s := s'; f ()
   end
val string_to_pairlist = fn (conv_key,conv_entry) =>
     let fun f () =
         case string_to_int()
         of 0 => EMPTY
          | n => PAIR(conv_key (n-1),conv_entry (string_to_int()),f())
     in f
     end
val string_to_pairlist_default = fn (conv_key,conv_entry) =>
    let val conv_row = string_to_pairlist(conv_key,conv_entry)
    in fn () =>
       let val default = conv_entry(string_to_int())
           val row = conv_row()
       in (row,default)
       end
   end
val string_to_table = fn (convert_row,s') =>
    let val len = String.size s'
        fun f ()=
           if !index < len then convert_row() :: f()
           else nil
     in (s := s'; index := 0; f ())
     end
local
  val memo = Array.array(numstates+numrules,ERROR)
  val _ =let fun g i=(Array.update(memo,i,REDUCE(i-numstates)); g(i+1))
       fun f i =
            if i=numstates then g i
            else (Array.update(memo,i,SHIFT (STATE i)); f (i+1))
          in f 0 handle General.Subscript => ()
          end
in
val entry_to_action = fn 0 => ACCEPT | 1 => ERROR | j => Array.sub(memo,(j-2))
end
val gotoT=Array.fromList(string_to_table(string_to_pairlist(NT,STATE),gotoT))
val actionRows=string_to_table(string_to_pairlist_default(T,entry_to_action),actionRows)
val actionRowNumbers = string_to_list actionRowNumbers
val actionT = let val actionRowLookUp=
let val a=Array.fromList(actionRows) in fn i=>Array.sub(a,i) end
in Array.fromList(List.map actionRowLookUp actionRowNumbers)
end
in LrTable.mkLrTable {actions=actionT,gotos=gotoT,numRules=numrules,
numStates=numstates,initialState=STATE 0}
end
end
local open Header in
type pos = int
type arg = unit
structure MlyValue = 
struct
datatype svalue = VOID | ntVOID of unit ->  unit
 | STRING of unit ->  (string) | INT of unit ->  (int)
 | TYPEID of unit ->  (string) | ID of unit ->  (string)
end
type svalue = MlyValue.svalue
type result = unit
end
structure EC=
struct
open LrTable
infix 5 $$
fun x $$ y = y::x
val is_keyword =
fn (T 32) => true | (T 33) => true | (T 34) => true | (T 40) => true
 | (T 36) => true | (T 37) => true | (T 38) => true | (T 42) => true
 | (T 43) => true | (T 44) => true | (T 28) => true | (T 29) => true
 | (T 30) => true | (T 31) => true | (T 35) => true | (T 39) => true
 | (T 41) => true | _ => false
val preferred_change : (term list * term list) list = 
nil
val noShift = 
fn (T 0) => true | _ => false
val showTerminal =
fn (T 0) => "EOF"
  | (T 1) => "ID"
  | (T 2) => "TYPEID"
  | (T 3) => "INT"
  | (T 4) => "STRING"
  | (T 5) => "COMMA"
  | (T 6) => "COLON"
  | (T 7) => "SEMICOLON"
  | (T 8) => "LPAREN"
  | (T 9) => "RPAREN"
  | (T 10) => "LBRACK"
  | (T 11) => "RBRACK"
  | (T 12) => "LBRACE"
  | (T 13) => "RBRACE"
  | (T 14) => "DOT"
  | (T 15) => "PLUS"
  | (T 16) => "MINUS"
  | (T 17) => "TIMES"
  | (T 18) => "DIVIDE"
  | (T 19) => "EQ"
  | (T 20) => "NEQ"
  | (T 21) => "LT"
  | (T 22) => "LE"
  | (T 23) => "GT"
  | (T 24) => "GE"
  | (T 25) => "AND"
  | (T 26) => "OR"
  | (T 27) => "ASSIGN"
  | (T 28) => "ARRAY"
  | (T 29) => "IF"
  | (T 30) => "THEN"
  | (T 31) => "ELSE"
  | (T 32) => "WHILE"
  | (T 33) => "FOR"
  | (T 34) => "TO"
  | (T 35) => "DO"
  | (T 36) => "LET"
  | (T 37) => "IN"
  | (T 38) => "END"
  | (T 39) => "OF"
  | (T 40) => "BREAK"
  | (T 41) => "NIL"
  | (T 42) => "FUNCTION"
  | (T 43) => "VAR"
  | (T 44) => "TYPE"
  | (T 45) => "UMINUS"
  | (T 46) => "IFX"
  | _ => "bogus-term"
local open Header in
val errtermvalue=
fn (T 1) => MlyValue.ID(fn () => ("bogus")) | 
(T 3) => MlyValue.INT(fn () => (1)) | 
(T 4) => MlyValue.STRING(fn () => ("")) | 
_ => MlyValue.VOID
end
val terms : term list = nil
 $$ (T 46) $$ (T 45) $$ (T 44) $$ (T 43) $$ (T 42) $$ (T 41) $$ (T 40)
 $$ (T 39) $$ (T 38) $$ (T 37) $$ (T 36) $$ (T 35) $$ (T 34) $$ (T 33)
 $$ (T 32) $$ (T 31) $$ (T 30) $$ (T 29) $$ (T 28) $$ (T 27) $$ (T 26)
 $$ (T 25) $$ (T 24) $$ (T 23) $$ (T 22) $$ (T 21) $$ (T 20) $$ (T 19)
 $$ (T 18) $$ (T 17) $$ (T 16) $$ (T 15) $$ (T 14) $$ (T 13) $$ (T 12)
 $$ (T 11) $$ (T 10) $$ (T 9) $$ (T 8) $$ (T 7) $$ (T 6) $$ (T 5) $$ 
(T 0)end
structure Actions =
struct 
exception mlyAction of int
local open Header in
val actions = 
fn (i392,defaultPos,stack,
    (()):arg) =>
case (i392,stack)
of  ( 0, ( ( _, ( MlyValue.ntVOID exp1, exp1left, exp1right)) :: 
rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  
exp1 = exp1 ()
 in ()
end; ()))
 in ( LrTable.NT 1, ( result, exp1left, exp1right), rest671)
end
|  ( 1, ( ( _, ( MlyValue.ntVOID exp1, _, exp1right)) :: _ :: ( _, ( 
MlyValue.ntVOID expseq1, expseq1left, _)) :: rest671)) => let val  
result = MlyValue.ntVOID (fn _ => ( let val  expseq1 = expseq1 ()
 val  exp1 = exp1 ()
 in ()
end; ()))
 in ( LrTable.NT 10, ( result, expseq1left, exp1right), rest671)
end
|  ( 2, ( ( _, ( MlyValue.ntVOID exp1, exp1left, exp1right)) :: 
rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  
exp1 = exp1 ()
 in ()
end; ()))
 in ( LrTable.NT 10, ( result, exp1left, exp1right), rest671)
end
|  ( 3, ( rest671)) => let val  result = MlyValue.ntVOID (fn _ => ())
 in ( LrTable.NT 10, ( result, defaultPos, defaultPos), rest671)
end
|  ( 4, ( ( _, ( MlyValue.ntVOID dec1, _, dec1right)) :: ( _, ( 
MlyValue.ntVOID decs1, decs1left, _)) :: rest671)) => let val  result
 = MlyValue.ntVOID (fn _ => ( let val  decs1 = decs1 ()
 val  dec1 = dec1 ()
 in ()
end; ()))
 in ( LrTable.NT 2, ( result, decs1left, dec1right), rest671)
end
|  ( 5, ( rest671)) => let val  result = MlyValue.ntVOID (fn _ => ())
 in ( LrTable.NT 2, ( result, defaultPos, defaultPos), rest671)
end
|  ( 6, ( ( _, ( MlyValue.ntVOID tydec1, tydec1left, tydec1right)) :: 
rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  
tydec1 = tydec1 ()
 in ()
end; ()))
 in ( LrTable.NT 3, ( result, tydec1left, tydec1right), rest671)
end
|  ( 7, ( ( _, ( MlyValue.ntVOID vardec1, vardec1left, vardec1right))
 :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val 
 vardec1 = vardec1 ()
 in ()
end; ()))
 in ( LrTable.NT 3, ( result, vardec1left, vardec1right), rest671)
end
|  ( 8, ( ( _, ( MlyValue.ntVOID fundec1, fundec1left, fundec1right))
 :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val 
 fundec1 = fundec1 ()
 in ()
end; ()))
 in ( LrTable.NT 3, ( result, fundec1left, fundec1right), rest671)
end
|  ( 9, ( ( _, ( MlyValue.ntVOID ty1, _, ty1right)) :: _ :: ( _, ( 
MlyValue.TYPEID TYPEID1, _, _)) :: ( _, ( _, TYPE1left, _)) :: rest671
)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  TYPEID1 = 
TYPEID1 ()
 val  ty1 = ty1 ()
 in ()
end; ()))
 in ( LrTable.NT 4, ( result, TYPE1left, ty1right), rest671)
end
|  ( 10, ( ( _, ( MlyValue.TYPEID TYPEID1, TYPEID1left, TYPEID1right))
 :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val 
 TYPEID1 = TYPEID1 ()
 in ()
end; ()))
 in ( LrTable.NT 7, ( result, TYPEID1left, TYPEID1right), rest671)
end
|  ( 11, ( ( _, ( MlyValue.TYPEID TYPEID1, _, TYPEID1right)) :: _ :: (
 _, ( _, ARRAY1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  TYPEID1 = TYPEID1 ()
 in ()
end; ()))
 in ( LrTable.NT 7, ( result, ARRAY1left, TYPEID1right), rest671)
end
|  ( 12, ( ( _, ( _, _, RBRACE1right)) :: ( _, ( MlyValue.ntVOID 
tyfields1, _, _)) :: ( _, ( _, LBRACE1left, _)) :: rest671)) => let
 val  result = MlyValue.ntVOID (fn _ => ( let val  tyfields1 = 
tyfields1 ()
 in ()
end; ()))
 in ( LrTable.NT 7, ( result, LBRACE1left, RBRACE1right), rest671)
end
|  ( 13, ( ( _, ( MlyValue.ntVOID varexp1, _, varexp1right)) :: _ :: _
 :: ( _, ( MlyValue.ntVOID exp1, _, _)) :: _ :: ( _, ( MlyValue.TYPEID
 TYPEID1, TYPEID1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  TYPEID1 = TYPEID1 ()
 val  exp1 = exp1 ()
 val  varexp1 = varexp1 ()
 in ()
end; ()))
 in ( LrTable.NT 11, ( result, TYPEID1left, varexp1right), rest671)

end
|  ( 14, ( ( _, ( MlyValue.ntVOID exp1, exp1left, exp1right)) :: 
rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  
exp1 = exp1 ()
 in ()
end; ()))
 in ( LrTable.NT 11, ( result, exp1left, exp1right), rest671)
end
|  ( 15, ( ( _, ( _, _, END1right)) :: ( _, ( MlyValue.ntVOID expseq1,
 _, _)) :: _ :: ( _, ( MlyValue.ntVOID decs1, _, _)) :: ( _, ( _, 
LET1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn _
 => ( let val  decs1 = decs1 ()
 val  expseq1 = expseq1 ()
 in ()
end; ()))
 in ( LrTable.NT 0, ( result, LET1left, END1right), rest671)
end
|  ( 16, ( ( _, ( MlyValue.INT INT1, INT1left, INT1right)) :: rest671)
) => let val  result = MlyValue.ntVOID (fn _ => ( let val  INT1 = INT1
 ()
 in ()
end; ()))
 in ( LrTable.NT 0, ( result, INT1left, INT1right), rest671)
end
|  ( 17, ( ( _, ( MlyValue.STRING STRING1, STRING1left, STRING1right))
 :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val 
 STRING1 = STRING1 ()
 in ()
end; ()))
 in ( LrTable.NT 0, ( result, STRING1left, STRING1right), rest671)
end
|  ( 18, ( ( _, ( _, NIL1left, NIL1right)) :: rest671)) => let val  
result = MlyValue.ntVOID (fn _ => ())
 in ( LrTable.NT 0, ( result, NIL1left, NIL1right), rest671)
end
|  ( 19, ( ( _, ( _, BREAK1left, BREAK1right)) :: rest671)) => let
 val  result = MlyValue.ntVOID (fn _ => ())
 in ( LrTable.NT 0, ( result, BREAK1left, BREAK1right), rest671)
end
|  ( 20, ( ( _, ( MlyValue.ntVOID exp1, _, exp1right)) :: _ :: ( _, ( 
MlyValue.ntVOID lvalue1, lvalue1left, _)) :: rest671)) => let val  
result = MlyValue.ntVOID (fn _ => ( let val  lvalue1 = lvalue1 ()
 val  exp1 = exp1 ()
 in ()
end; ()))
 in ( LrTable.NT 0, ( result, lvalue1left, exp1right), rest671)
end
|  ( 21, ( ( _, ( MlyValue.ntVOID lvalue1, lvalue1left, lvalue1right))
 :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val 
 lvalue1 = lvalue1 ()
 in ()
end; ()))
 in ( LrTable.NT 0, ( result, lvalue1left, lvalue1right), rest671)
end
|  ( 22, ( ( _, ( MlyValue.ntVOID exp3, _, exp3right)) :: _ :: ( _, ( 
MlyValue.ntVOID exp2, _, _)) :: _ :: ( _, ( MlyValue.ntVOID exp1, _, _
)) :: ( _, ( _, IF1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 val  exp3 = exp3 ()
 in ()
end; ()))
 in ( LrTable.NT 0, ( result, IF1left, exp3right), rest671)
end
|  ( 23, ( ( _, ( MlyValue.ntVOID exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.ntVOID exp1, _, _)) :: ( _, ( _, IF1left, _)) :: rest671)) =>
 let val  result = MlyValue.ntVOID (fn _ => ( let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in ()
end; ()))
 in ( LrTable.NT 0, ( result, IF1left, exp2right), rest671)
end
|  ( 24, ( ( _, ( MlyValue.ntVOID exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.ntVOID exp1, _, _)) :: ( _, ( _, WHILE1left, _)) :: rest671))
 => let val  result = MlyValue.ntVOID (fn _ => ( let val  exp1 = exp1
 ()
 val  exp2 = exp2 ()
 in ()
end; ()))
 in ( LrTable.NT 0, ( result, WHILE1left, exp2right), rest671)
end
|  ( 25, ( ( _, ( MlyValue.ntVOID exp3, _, exp3right)) :: _ :: ( _, ( 
MlyValue.ntVOID exp2, _, _)) :: _ :: ( _, ( MlyValue.ntVOID exp1, _, _
)) :: _ :: ( _, ( MlyValue.ID ID1, _, _)) :: ( _, ( _, FOR1left, _))
 :: rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val 
 ID1 = ID1 ()
 val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 val  exp3 = exp3 ()
 in ()
end; ()))
 in ( LrTable.NT 0, ( result, FOR1left, exp3right), rest671)
end
|  ( 26, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( MlyValue.ntVOID 
funclist1, _, _)) :: _ :: ( _, ( MlyValue.ID ID1, ID1left, _)) :: 
rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  ID1
 = ID1 ()
 val  funclist1 = funclist1 ()
 in ()
end; ()))
 in ( LrTable.NT 0, ( result, ID1left, RPAREN1right), rest671)
end
|  ( 27, ( ( _, ( _, _, RBRACE1right)) :: ( _, ( MlyValue.ntVOID 
tyafields1, _, _)) :: _ :: ( _, ( MlyValue.ID ID1, ID1left, _)) :: 
rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  ID1
 = ID1 ()
 val  tyafields1 = tyafields1 ()
 in ()
end; ()))
 in ( LrTable.NT 0, ( result, ID1left, RBRACE1right), rest671)
end
|  ( 28, ( ( _, ( MlyValue.ntVOID exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.ntVOID exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in ()
end; ()))
 in ( LrTable.NT 0, ( result, exp1left, exp2right), rest671)
end
|  ( 29, ( ( _, ( MlyValue.ntVOID exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.ntVOID exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in ()
end; ()))
 in ( LrTable.NT 0, ( result, exp1left, exp2right), rest671)
end
|  ( 30, ( ( _, ( MlyValue.ntVOID exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.ntVOID exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in ()
end; ()))
 in ( LrTable.NT 0, ( result, exp1left, exp2right), rest671)
end
|  ( 31, ( ( _, ( MlyValue.ntVOID exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.ntVOID exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in ()
end; ()))
 in ( LrTable.NT 0, ( result, exp1left, exp2right), rest671)
end
|  ( 32, ( ( _, ( MlyValue.ntVOID exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.ntVOID exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in ()
end; ()))
 in ( LrTable.NT 0, ( result, exp1left, exp2right), rest671)
end
|  ( 33, ( ( _, ( MlyValue.ntVOID exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.ntVOID exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in ()
end; ()))
 in ( LrTable.NT 0, ( result, exp1left, exp2right), rest671)
end
|  ( 34, ( ( _, ( MlyValue.ntVOID exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.ntVOID exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in ()
end; ()))
 in ( LrTable.NT 0, ( result, exp1left, exp2right), rest671)
end
|  ( 35, ( ( _, ( MlyValue.ntVOID exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.ntVOID exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in ()
end; ()))
 in ( LrTable.NT 0, ( result, exp1left, exp2right), rest671)
end
|  ( 36, ( ( _, ( MlyValue.ntVOID exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.ntVOID exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in ()
end; ()))
 in ( LrTable.NT 0, ( result, exp1left, exp2right), rest671)
end
|  ( 37, ( ( _, ( MlyValue.ntVOID exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.ntVOID exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in ()
end; ()))
 in ( LrTable.NT 0, ( result, exp1left, exp2right), rest671)
end
|  ( 38, ( ( _, ( MlyValue.ntVOID exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.ntVOID exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in ()
end; ()))
 in ( LrTable.NT 0, ( result, exp1left, exp2right), rest671)
end
|  ( 39, ( ( _, ( MlyValue.ntVOID exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.ntVOID exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in ()
end; ()))
 in ( LrTable.NT 0, ( result, exp1left, exp2right), rest671)
end
|  ( 40, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( MlyValue.ntVOID 
expseq1, _, _)) :: ( _, ( _, LPAREN1left, _)) :: rest671)) => let val 
 result = MlyValue.ntVOID (fn _ => ( let val  expseq1 = expseq1 ()
 in ()
end; ()))
 in ( LrTable.NT 0, ( result, LPAREN1left, RPAREN1right), rest671)
end
|  ( 41, ( ( _, ( MlyValue.ntVOID exp1, _, exp1right)) :: ( _, ( _, 
MINUS1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID (fn
 _ => ( let val  exp1 = exp1 ()
 in ()
end; ()))
 in ( LrTable.NT 0, ( result, MINUS1left, exp1right), rest671)
end
|  ( 42, ( ( _, ( MlyValue.ntVOID exp1, _, exp1right)) :: _ :: ( _, ( 
MlyValue.ntVOID funclist1, funclist1left, _)) :: rest671)) => let val 
 result = MlyValue.ntVOID (fn _ => ( let val  funclist1 = funclist1 ()
 val  exp1 = exp1 ()
 in ()
end; ()))
 in ( LrTable.NT 13, ( result, funclist1left, exp1right), rest671)
end
|  ( 43, ( ( _, ( MlyValue.ntVOID exp1, exp1left, exp1right)) :: 
rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  
exp1 = exp1 ()
 in ()
end; ()))
 in ( LrTable.NT 13, ( result, exp1left, exp1right), rest671)
end
|  ( 44, ( rest671)) => let val  result = MlyValue.ntVOID (fn _ => ())
 in ( LrTable.NT 13, ( result, defaultPos, defaultPos), rest671)
end
|  ( 45, ( ( _, ( MlyValue.TYPEID TYPEID1, _, TYPEID1right)) :: _ :: (
 _, ( MlyValue.ID ID1, _, _)) :: _ :: ( _, ( MlyValue.ntVOID tyfields1
, tyfields1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID
 (fn _ => ( let val  tyfields1 = tyfields1 ()
 val  ID1 = ID1 ()
 val  TYPEID1 = TYPEID1 ()
 in ()
end; ()))
 in ( LrTable.NT 8, ( result, tyfields1left, TYPEID1right), rest671)

end
|  ( 46, ( ( _, ( MlyValue.TYPEID TYPEID1, _, TYPEID1right)) :: _ :: (
 _, ( MlyValue.ID ID1, ID1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  ID1 = ID1 ()
 val  TYPEID1 = TYPEID1 ()
 in ()
end; ()))
 in ( LrTable.NT 8, ( result, ID1left, TYPEID1right), rest671)
end
|  ( 47, ( rest671)) => let val  result = MlyValue.ntVOID (fn _ => ())
 in ( LrTable.NT 8, ( result, defaultPos, defaultPos), rest671)
end
|  ( 48, ( ( _, ( MlyValue.ntVOID varexp1, _, varexp1right)) :: _ :: (
 _, ( MlyValue.ID ID1, _, _)) :: _ :: ( _, ( MlyValue.ntVOID 
tyafields1, tyafields1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  tyafields1 = tyafields1 ()
 val  ID1 = ID1 ()
 val  varexp1 = varexp1 ()
 in ()
end; ()))
 in ( LrTable.NT 12, ( result, tyafields1left, varexp1right), rest671)

end
|  ( 49, ( ( _, ( MlyValue.ntVOID varexp1, _, varexp1right)) :: _ :: (
 _, ( MlyValue.ID ID1, ID1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  ID1 = ID1 ()
 val  varexp1 = varexp1 ()
 in ()
end; ()))
 in ( LrTable.NT 12, ( result, ID1left, varexp1right), rest671)
end
|  ( 50, ( rest671)) => let val  result = MlyValue.ntVOID (fn _ => ())
 in ( LrTable.NT 12, ( result, defaultPos, defaultPos), rest671)
end
|  ( 51, ( ( _, ( MlyValue.ntVOID varexp1, _, varexp1right)) :: _ :: (
 _, ( MlyValue.TYPEID TYPEID1, _, _)) :: _ :: ( _, ( MlyValue.ID ID1,
 _, _)) :: ( _, ( _, VAR1left, _)) :: rest671)) => let val  result = 
MlyValue.ntVOID (fn _ => ( let val  ID1 = ID1 ()
 val  TYPEID1 = TYPEID1 ()
 val  varexp1 = varexp1 ()
 in ()
end; ()))
 in ( LrTable.NT 5, ( result, VAR1left, varexp1right), rest671)
end
|  ( 52, ( ( _, ( MlyValue.ntVOID varexp1, _, varexp1right)) :: _ :: (
 _, ( MlyValue.ID ID1, _, _)) :: ( _, ( _, VAR1left, _)) :: rest671))
 => let val  result = MlyValue.ntVOID (fn _ => ( let val  ID1 = ID1 ()
 val  varexp1 = varexp1 ()
 in ()
end; ()))
 in ( LrTable.NT 5, ( result, VAR1left, varexp1right), rest671)
end
|  ( 53, ( ( _, ( MlyValue.ntVOID exp1, _, exp1right)) :: _ :: _ :: (
 _, ( MlyValue.ntVOID tyfields1, _, _)) :: _ :: ( _, ( MlyValue.ID ID1
, _, _)) :: ( _, ( _, FUNCTION1left, _)) :: rest671)) => let val  
result = MlyValue.ntVOID (fn _ => ( let val  ID1 = ID1 ()
 val  tyfields1 = tyfields1 ()
 val  exp1 = exp1 ()
 in ()
end; ()))
 in ( LrTable.NT 6, ( result, FUNCTION1left, exp1right), rest671)
end
|  ( 54, ( ( _, ( MlyValue.ntVOID exp1, _, exp1right)) :: _ :: ( _, ( 
MlyValue.TYPEID TYPEID1, _, _)) :: _ :: _ :: ( _, ( MlyValue.ntVOID 
tyfields1, _, _)) :: _ :: ( _, ( MlyValue.ID ID1, _, _)) :: ( _, ( _, 
FUNCTION1left, _)) :: rest671)) => let val  result = MlyValue.ntVOID
 (fn _ => ( let val  ID1 = ID1 ()
 val  tyfields1 = tyfields1 ()
 val  TYPEID1 = TYPEID1 ()
 val  exp1 = exp1 ()
 in ()
end; ()))
 in ( LrTable.NT 6, ( result, FUNCTION1left, exp1right), rest671)
end
|  ( 55, ( ( _, ( MlyValue.ID ID1, _, ID1right)) :: _ :: ( _, ( 
MlyValue.ntVOID lvalue1, lvalue1left, _)) :: rest671)) => let val  
result = MlyValue.ntVOID (fn _ => ( let val  lvalue1 = lvalue1 ()
 val  ID1 = ID1 ()
 in ()
end; ()))
 in ( LrTable.NT 9, ( result, lvalue1left, ID1right), rest671)
end
|  ( 56, ( ( _, ( MlyValue.ID ID1, ID1left, ID1right)) :: rest671)) =>
 let val  result = MlyValue.ntVOID (fn _ => ( let val  ID1 = ID1 ()
 in ()
end; ()))
 in ( LrTable.NT 9, ( result, ID1left, ID1right), rest671)
end
|  ( 57, ( ( _, ( _, _, RBRACK1right)) :: ( _, ( MlyValue.ntVOID exp1,
 _, _)) :: _ :: ( _, ( MlyValue.ntVOID lvalue1, lvalue1left, _)) :: 
rest671)) => let val  result = MlyValue.ntVOID (fn _ => ( let val  
lvalue1 = lvalue1 ()
 val  exp1 = exp1 ()
 in ()
end; ()))
 in ( LrTable.NT 9, ( result, lvalue1left, RBRACK1right), rest671)
end
| _ => raise (mlyAction i392)
end
val void = MlyValue.VOID
val extract = fn a => (fn MlyValue.ntVOID x => x
| _ => let exception ParseInternal
	in raise ParseInternal end) a ()
end
end
structure Tokens : Tiger_TOKENS =
struct
type svalue = ParserData.svalue
type ('a,'b) token = ('a,'b) Token.token
fun EOF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 0,(
ParserData.MlyValue.VOID,p1,p2))
fun ID (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 1,(
ParserData.MlyValue.ID (fn () => i),p1,p2))
fun TYPEID (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 2,(
ParserData.MlyValue.TYPEID (fn () => i),p1,p2))
fun INT (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 3,(
ParserData.MlyValue.INT (fn () => i),p1,p2))
fun STRING (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 4,(
ParserData.MlyValue.STRING (fn () => i),p1,p2))
fun COMMA (p1,p2) = Token.TOKEN (ParserData.LrTable.T 5,(
ParserData.MlyValue.VOID,p1,p2))
fun COLON (p1,p2) = Token.TOKEN (ParserData.LrTable.T 6,(
ParserData.MlyValue.VOID,p1,p2))
fun SEMICOLON (p1,p2) = Token.TOKEN (ParserData.LrTable.T 7,(
ParserData.MlyValue.VOID,p1,p2))
fun LPAREN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 8,(
ParserData.MlyValue.VOID,p1,p2))
fun RPAREN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 9,(
ParserData.MlyValue.VOID,p1,p2))
fun LBRACK (p1,p2) = Token.TOKEN (ParserData.LrTable.T 10,(
ParserData.MlyValue.VOID,p1,p2))
fun RBRACK (p1,p2) = Token.TOKEN (ParserData.LrTable.T 11,(
ParserData.MlyValue.VOID,p1,p2))
fun LBRACE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 12,(
ParserData.MlyValue.VOID,p1,p2))
fun RBRACE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 13,(
ParserData.MlyValue.VOID,p1,p2))
fun DOT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 14,(
ParserData.MlyValue.VOID,p1,p2))
fun PLUS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 15,(
ParserData.MlyValue.VOID,p1,p2))
fun MINUS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 16,(
ParserData.MlyValue.VOID,p1,p2))
fun TIMES (p1,p2) = Token.TOKEN (ParserData.LrTable.T 17,(
ParserData.MlyValue.VOID,p1,p2))
fun DIVIDE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 18,(
ParserData.MlyValue.VOID,p1,p2))
fun EQ (p1,p2) = Token.TOKEN (ParserData.LrTable.T 19,(
ParserData.MlyValue.VOID,p1,p2))
fun NEQ (p1,p2) = Token.TOKEN (ParserData.LrTable.T 20,(
ParserData.MlyValue.VOID,p1,p2))
fun LT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 21,(
ParserData.MlyValue.VOID,p1,p2))
fun LE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 22,(
ParserData.MlyValue.VOID,p1,p2))
fun GT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 23,(
ParserData.MlyValue.VOID,p1,p2))
fun GE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 24,(
ParserData.MlyValue.VOID,p1,p2))
fun AND (p1,p2) = Token.TOKEN (ParserData.LrTable.T 25,(
ParserData.MlyValue.VOID,p1,p2))
fun OR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 26,(
ParserData.MlyValue.VOID,p1,p2))
fun ASSIGN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 27,(
ParserData.MlyValue.VOID,p1,p2))
fun ARRAY (p1,p2) = Token.TOKEN (ParserData.LrTable.T 28,(
ParserData.MlyValue.VOID,p1,p2))
fun IF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 29,(
ParserData.MlyValue.VOID,p1,p2))
fun THEN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 30,(
ParserData.MlyValue.VOID,p1,p2))
fun ELSE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 31,(
ParserData.MlyValue.VOID,p1,p2))
fun WHILE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 32,(
ParserData.MlyValue.VOID,p1,p2))
fun FOR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 33,(
ParserData.MlyValue.VOID,p1,p2))
fun TO (p1,p2) = Token.TOKEN (ParserData.LrTable.T 34,(
ParserData.MlyValue.VOID,p1,p2))
fun DO (p1,p2) = Token.TOKEN (ParserData.LrTable.T 35,(
ParserData.MlyValue.VOID,p1,p2))
fun LET (p1,p2) = Token.TOKEN (ParserData.LrTable.T 36,(
ParserData.MlyValue.VOID,p1,p2))
fun IN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 37,(
ParserData.MlyValue.VOID,p1,p2))
fun END (p1,p2) = Token.TOKEN (ParserData.LrTable.T 38,(
ParserData.MlyValue.VOID,p1,p2))
fun OF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 39,(
ParserData.MlyValue.VOID,p1,p2))
fun BREAK (p1,p2) = Token.TOKEN (ParserData.LrTable.T 40,(
ParserData.MlyValue.VOID,p1,p2))
fun NIL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 41,(
ParserData.MlyValue.VOID,p1,p2))
fun FUNCTION (p1,p2) = Token.TOKEN (ParserData.LrTable.T 42,(
ParserData.MlyValue.VOID,p1,p2))
fun VAR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 43,(
ParserData.MlyValue.VOID,p1,p2))
fun TYPE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 44,(
ParserData.MlyValue.VOID,p1,p2))
fun UMINUS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 45,(
ParserData.MlyValue.VOID,p1,p2))
fun IFX (p1,p2) = Token.TOKEN (ParserData.LrTable.T 46,(
ParserData.MlyValue.VOID,p1,p2))
end
end
